Answer 1------------------------------------------------------->

FEature of html5-
===================
1. Audio and vedio --> Audio and vedio tag on their website. Html5 Video can use css to style
the vedio tag. HTML5 makes adding vedio super-fast and without having to build a vedio player.

2. Header and Footer
=====================
tHERE is no longer need to identify the two elements with a <div> tag.Footer is placed at end of webpage while Header is placed at start of web page.
HEADER can contain- headings, logo, icon, Authorship information.
FOOTER - Authorship iformation, copyright information, contact information.

3. Figure and Figcaption
========================
<figure> element to mark up a photo in a document, and a <figcaption> element to define a caption for photo. This tag provide a container for content that is equivalent to figure.
<figcaption> tag defines a caption for a <figure> element.

4. Nav tag
==========
<nav> tag defines a set of navigation links. it is used for part of an internet site that links to different pages at website. The hyperlinks can be organized througn a number of approaches.
Common examples of nav elements are menu tables, contents, and indexes.


Answer 2 ------------------------------------------------------------>

HTML ENTITIES-
===============
Reserved characters in html must be replaced with character entities.
< (less tahn) --->  &lt;
" (double quotation mark) ----> &quot;
& (ampersand) ---> &amp;
> (greater than) ---> &gt;
. (dot operator) ---> &sdot;

Answer 3 -------------------------------------------------------->

Accessibility is the practice of making your websites usable by as many people as possible. We traditionally think of this as being about people with disabilities, but the practice of making sites accessible also benefits other groups such as those using mobile devices, or those with slow network connections.
You might also think of accessibility as treating everyone the same, and giving them equal opportunities, no matter what their ability or circumstances. Just as it is wrong to exclude someone from a physical building because they are in a wheelchair (modern public buildings generally have wheelchair ramps or elevators), it is also not right to exclude someone from a website because they have a visual impairment. We are all different, 
but we are all human, and therefore have the same human rights.
Accessibility is the right thing to do. Providing accessible sites is part of the law in some countries, which can open up some significant markets that otherwise would not be able to use your services or buy your products.

Building accessible sites benefits everyone:

Semantic HTML, which improves accessibility, also improves SEO, making your site more findable.
Caring about accessibility demonstrates good ethics and morals, which improves your public image.
Other good practices that improve accessibility also make your site more usable by other groups, such as mobile phone users or those on low network speed. In fact, everyone can benefit from many such improvements.
Did we mention it is also the law in some places?

We are looking for kinds of disability are we looking at --
--  Accessibility is the right thing to do. Providing accessible sites is part of the law in some countries, which can open up some significant markets that otherwise would not be able to use your services or buy your products.
-- People with hearing impairments
-- mobility impairments
-- cognitive impairments

Answer 3 --------------------------------------------------------------->

3 Ways to achive accessibility in html
======================================
Good Semantics--> Out there on the web, the truth is that people do some very strange things with HTML markup. Some abuses of HTML are due to legacy practices that have not been completely forgotten, and some are just plain ignorance. Whatever the case, you should replace such bad code.
Sometimes you are not in the position to get rid of lousy markup — your pages might be generated by some kind of server-side framework over which you don't have full control, or you might have third party content on your page (such as ad banners) over which you have no control.

Text content --> One of the best accessibility aids a screen reader user can have is an excellent content structure with headings, paragraphs, lists, etc. An excellent semantic example might look something like the following:
The screen reader reads each header out as you progress through the content, notifying you what a heading is, what is a paragraph, etc.
It stops after each element, letting you go at whatever pace is comfortable for you.
You can jump to the next/previous heading in many screen readers.
You can also bring up a list of all headings in many screen readers, allowing you to use them as a handy table of contents to find specific content.

Using clear language
=====================
The language you use can also affect accessibility. In general, you should use clear language that is not overly complex and doesn't use unnecessary jargon or slang terms. This not only benefits people with cognitive or other disabilities; it benefits readers for whom the text is not written in their first language, younger people…, everyone, in fact! Apart from this, you should try to avoid using language and characters that don't get read out clearly by the screen reader. For example:

Don't use dashes if you can avoid it. Instead of writing 5–7, write 5 to 7.
Expand abbreviations — instead of writing Jan, write January.
Expand acronyms, at least once or twice, then use the <abbr> tag to describe them.

UI Controls
===========
By UI controls, we mean the main parts of web documents that users interact with — most commonly buttons, links, and form controls. In this section, we'll look at the basic accessibility concerns to be aware of when creating such controls. Later articles on WAI-ARIA and multimedia will look at other aspects of UI accessibility.

One key aspect of the accessibility of UI controls is that by default, browsers allow them to be manipulated by the keyboard. You can try this out using our native-keyboard-accessibility.html example (see the source code). Open this in a new tab, and try pressing the tab key; after a few presses, you should see the tab focus start to move through the different focusable elements. The focused elements are given a highlighted default style in every browser (it differs slightly between different browsers) so that you can tell what element is focused.

